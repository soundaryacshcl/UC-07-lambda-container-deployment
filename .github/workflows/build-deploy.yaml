# .github/workflows/build-deploy.yml
name: Build and Deploy Application

on:
  # Manual trigger (kept exactly as you had it)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]
      image_tag:
        description: 'Docker image tag (leave empty for auto-generated)'
        required: false
        default: ''
        type: string
      skip_build:
        description: 'Skip Docker build (use existing image)'
        required: false
        default: false
        type: boolean

  # CI triggers
  pull_request:
    branches: [main]
    # paths: ['src/**', 'terraform/**', '.github/wokflows/**']   # run when code OR tf changes
  push:
    branches: [main]

# Token needs write perms for commits & PR comments
permissions:
  id-token:   write
  contents:   write      # was read
  pull-requests: write

env:
  AWS_REGION: ap-south-1
  TF_VAR_aws_region: ap-south-1
  AWS_ROLE_ARN: arn:aws:iam::436450225331:role/oidc-assume-role  # replace with your actual role ARN

#######################################################################
# 1. BUILD & PUSH (unchanged except for the "if" guard)
#######################################################################
jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    if: github.event_name == 'workflow_dispatch' && github.event.inputs.skip_build != 'true' || github.event_name != 'workflow_dispatch'

    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unique image tag
        id: generate-tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          else
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            SHORT_SHA=${GITHUB_SHA:0:7}
            IMAGE_TAG="v1.12.0-${TIMESTAMP}-${SHORT_SHA}"
          fi
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${IMAGE_TAG}"

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-Build-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR Repository URI
        id: ecr-uri
        run: |
          REPO_NAME="hello-world-lambda-${{ github.event.inputs.environment || 'dev' }}"
          ECR_URI=$(aws ecr describe-repositories \
            --repository-names "$REPO_NAME" \
            --query 'repositories[0].repositoryUri' \
            --output text)
          echo "ecr_uri=$ECR_URI" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.ecr-uri.outputs.ecr_uri }}
          tags: |
            type=raw,value=${{ steps.generate-tag.outputs.image_tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          provenance: false
          sbom: false
          no-cache: true

    outputs:
      image_uri: ${{ steps.ecr-uri.outputs.ecr_uri }}:${{ steps.generate-tag.outputs.image_tag }}
      image_tag: ${{ steps.generate-tag.outputs.image_tag }}

#######################################################################
# 2. DEPLOY / PLAN  (runs for PRs AND for main)
#######################################################################
  deploy-infrastructure:
    name: Plan / Apply Infrastructure
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # --- Checkout & basic static analysis ----------------------
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        continue-on-error: true
        run: |
          tflint --init
          tflint -f compact
        working-directory: ./terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./terraform/environments/${{ github.event.inputs.environment || 'dev' }}
          framework: terraform
        continue-on-error: true

      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # --- Terraform init / plan --------------------------------
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="image_tag=${{ needs.build-and-push.outputs.image_tag || github.event.inputs.image_tag || 'latest' }}" \
            -out=tfplan

          # Convert binary plan to Markdown for easier review
          terraform show -no-color tfplan > tfplan.md
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      # ------------------------------------------------------------------
      # Commit tfplan.md back to the PR branch
      # ------------------------------------------------------------------
      - name: Commit plan back to PR branch
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          PLAN_PATH: .github/terraform-plans/plan-${{ github.event.number }}.md
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch and check out the real branch tip
          git fetch --quiet origin "$BRANCH_NAME"
          git checkout -B "$BRANCH_NAME" "origin/$BRANCH_NAME"

          # Copy/overwrite the plan file
          mkdir -p .github/terraform-plans
          cp terraform/environments/${{ github.event.inputs.environment || 'dev' }}/tfplan.md "$PLAN_PATH"

          # Commit (skip if no changes)
          git add "$PLAN_PATH"
          git commit -m "docs(terraform): add plan for PR #${{ github.event.number }}" || echo "No changes to commit"

          # Safe push
          git push origin HEAD:"$BRANCH_NAME" --force-with-lease

      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # --- Comment summary on PR --------------------------------
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Comment Plan Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planText = fs.readFileSync('.github/terraform-plans/plan-${{ github.event.number }}.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan for \`${{ github.event.inputs.environment || 'dev' }}\`\n\n<details>\n<summary>Click to expand</summary>\n\n\`\`\`\n${planText.replace(/`/g,'\\`')}\n\`\`\`\n</details>`
            });

      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # --- Apply on main branch ONLY -----------------------------
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # --- Capture outputs (after apply) -------------------------
      #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      - name: Capture Outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: tfoutputs
        run: |
          API_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
          FUNCTION_URL=$(terraform output -raw lambda_function_url 2>/dev/null || echo "")
          LAMBDA_ARN=$(terraform output -raw lambda_function_arn 2>/dev/null || echo "")

          echo "api_url=$API_URL"       >> $GITHUB_OUTPUT
          echo "function_url=$FUNCTION_URL" >> $GITHUB_OUTPUT
          echo "lambda_arn=$LAMBDA_ARN" >> $GITHUB_OUTPUT
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Setup Node.js
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'pull_request'
        run: |
          curl -sSLo terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}
        if: github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git config --global user.email "vnagaraj984@gmail.com"
          git config --global user.name "nag9844"

          git fetch origin ${{ github.head_ref }}
          git checkout ${{ github.head_ref }}

          echo "--- Generating terraform-docs ---"
          terraform-docs markdown . > README.md.new
          mv README.md.new README.md

          if [ -f README.md ]; then
            git add README.md
            git diff --cached --quiet && echo "No changes to commit" || git commit -m "docs(terraform): Update README.md via terraform-docs"
            git push origin HEAD:${{ github.head_ref }}
          else
            echo "README.md was not generated."
          fi